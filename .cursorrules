# OLS Gauss-Markov Assumptions Checker - Cursor Rules

## Project Context
This project is a Python-based tool for econometricians and PhD economics students that tests whether a given OLS (Ordinary Least Squares) regression model satisfies the Gauss-Markov assumptions necessary for the estimator to be BLUE (Best Linear Unbiased Estimator). The tool combines formal hypothesis tests with visual diagnostics to provide both statistical rigor and intuitive understanding.

## Technical Framework
- **Primary language**: Python 3.8+
- **Core libraries**: statsmodels, pandas, numpy, matplotlib, seaborn, streamlit, patsy, scipy
- **Development approach**: Modular design with separation of concerns
- **Testing**: Pytest for unit tests, with particular attention to statistical accuracy
- **Documentation**: Numpy-style docstrings, markdown for guides

## Project Structure and Implementation Status
```
gauss_markov_checker/
├── __init__.py
├── assumptions/
│   ├── __init__.py
│   ├── linearity.py             [COMPLETED] - RESET test implementation
│   ├── multicollinearity.py     [COMPLETED] - VIF, condition number, correlations
│   ├── interpretation_rules.json [CONTINUOUSLY UPDATED] - Test interpretations knowledge base
│   ├── exogeneity.py           [COMPLETED]
│   ├── homoscedasticity.py     [COMPLETED]
│   ├── autocorrelation.py      [COMPLETED]
│   └── normality.py            [COMPLETED]
├── visualization/
│   ├── __init__.py
│   ├── diagnostic_plots.py      [COMPLETED] - Separated from assumption tests
│   └── report_generator.py      [PENDING]
├── utils/
│   ├── __init__.py
│   ├── model_wrappers.py       [PENDING]
│   └── statistics.py           [PENDING]
├── app/
│   ├── __init__.py
│   └── streamlit_app.py        [COMPLETED] - Fully functional with visualizations
└── tests/
    ├── __init__.py
    ├── test_linearity.py       [PENDING]
    ├── test_multicollinearity.py [PENDING]
    ├── test_exogeneity.py      [PENDING]
    ├── test_homoscedasticity.py [PENDING]
    ├── test_autocorrelation.py [PENDING]
    ├── test_normality.py       [PENDING]
    └── test_app.py             [PENDING]

```

## Implementation Progress

### Completed Features
1. **Core Statistical Tests**:
   - Linearity (RESET test)
   - Multicollinearity (VIF, condition number, correlations)
   - Homoscedasticity (Breusch-Pagan, White, Goldfeld-Quandt tests)
   - Autocorrelation (Durbin-Watson, Breusch-Godfrey, Ljung-Box tests)
   - Normality (Jarque-Bera, Shapiro-Wilk, D'Agostino-Pearson tests)
   - Clean separation of statistical tests from visualization code

2. **Visualization**:
   - Comprehensive diagnostic plots for all assumptions
   - Residual histograms and Q-Q plots for normality
   - Residuals vs. fitted and scale-location plots for homoscedasticity
   - ACF and PACF plots for autocorrelation
   - Correlation heatmaps for multicollinearity
   - Component-plus-residual plots for linearity

3. **Streamlit App**:
   - User-friendly interface for data upload and model specification
   - Interactive test selection and results display
   - Organized visualization with tabs for different assumptions
   - Detailed explanations and interpretation guidelines
   - Proper error handling and user guidance

4. **Documentation**:
   - Comprehensive interpretation rules in JSON format
   - Numpy-style docstrings for all functions
   - Clear mathematical and statistical explanations
   - In-app explanatory text for all visualizations and tests

### Current Status
- Successfully implemented all core statistical tests for Gauss-Markov assumptions
- Completed comprehensive visualization suite for all assumptions
- Developed a fully functional Streamlit app with integrated visualizations
- Established clean separation between test logic and visualization
- Created knowledge base for test interpretation (interpretation_rules.json)
- Improved code organization and documentation

### Next Steps
1. **Report Generation**:
   - Implement report generation functionality
   - Create exportable PDF/HTML reports with test results and visualizations
   - Add customizable report templates

2. **Testing**:
   - Develop comprehensive test suite
   - Add edge case handling
   - Include numerical accuracy tests

3. **Documentation**:
   - Create user guide
   - Add example notebooks
   - Include theoretical background documentation

4. **Advanced Features**:
   - Implement model comparison functionality
   - Add robust alternatives for each test
   - Develop time series-specific diagnostics

## Code Style Guidelines
- Follow PEP 8 guidelines
- Use numpy-style docstrings
- Maximum line length: 88 characters (Black formatter default)
- Use type hints where appropriate
- Variable names should be descriptive and follow econometric conventions
- Use modular and DRY coding styles

## Implementation Notes
- All statistical tests include p-values and critical values
- Visualization functions have consistent parameters and return types
- Error messages are informative for econometricians
- References to econometric literature included for all tests

## Documentation Requirements
Each function includes:
- Null and alternative hypotheses
- Interpretation guidelines
- Example usage

